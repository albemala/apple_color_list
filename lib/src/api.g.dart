// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class AppleColorList {
  AppleColorList({
    required this.name,
    required this.colors,
  });

  String name;

  List<AppleColor> colors;

  Object encode() {
    return <Object?>[
      name,
      colors,
    ];
  }

  static AppleColorList decode(Object result) {
    result as List<Object?>;
    return AppleColorList(
      name: result[0]! as String,
      colors: (result[1] as List<Object?>?)!.cast<AppleColor>(),
    );
  }
}

class AppleColor {
  AppleColor({
    required this.name,
    required this.red,
    required this.green,
    required this.blue,
    required this.alpha,
  });

  String name;

  double red;

  double green;

  double blue;

  double alpha;

  Object encode() {
    return <Object?>[
      name,
      red,
      green,
      blue,
      alpha,
    ];
  }

  static AppleColor decode(Object result) {
    result as List<Object?>;
    return AppleColor(
      name: result[0]! as String,
      red: result[1]! as double,
      green: result[2]! as double,
      blue: result[3]! as double,
      alpha: result[4]! as double,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is AppleColorList) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is AppleColor) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return AppleColorList.decode(readValue(buffer)!);
      case 130: 
        return AppleColor.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AppleColorListApi {
  /// Constructor for [AppleColorListApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppleColorListApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<AppleColorList> readColorList(String path) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.apple_color_list.AppleColorListApi.readColorList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[path]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AppleColorList?)!;
    }
  }

  Future<void> writeColorList(AppleColorList colorList, String path) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.apple_color_list.AppleColorListApi.writeColorList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[colorList, path]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
